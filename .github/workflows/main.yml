name: Main

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

    #  - name: Gradle wrapper validation
    #    uses: gradle/wrapper-validation-action@v1
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
                    
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
         
      - name: Change wrapper permissions
        run: chmod +x ./gradlew
        
      - name: Write key
        run: |
          echo buildWithGitSuffix=true >> local.properties
          echo storePassword=password >> local.properties
          echo keyAlias=alias >> local.properties
          echo keyPassword=password >> local.properties
          echo fileDir=`pwd`/key.jks >> local.properties
          keytool -genkey -dname "cn=A, ou=D, o=G, l=P, st=M, c=I" -keystore key.jks -storepass password -alias alias -keyalg RSA -keysize 4096 -validity 10000

#      - name: Write key
#        run: |
#          echo buildWithGitSuffix=true >> local.properties
#          echo storePassword=password >> local.properties
#          echo keyAlias=alias >> local.properties
#          echo keyPassword=password >> local.properties
#          echo fileDir=`pwd`/key.jks >> local.properties
#          keytool -genkey -dname "cn=A, ou=D, o=G, l=P, st=M, c=I" -keystore key.jks -storepass password -alias alias -keyalg RSA -keysize 4096 -validity 10000
          
#      - name: Cache gradle
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          restore-keys: ${{ runner.os }}-gradle-

#      - name: Gradle prebuild
#        run:          
#          ./gradlew prebuild
      
#      - name: Build release
#        id: buildRelease
#        run: |
#          ./gradlew :app:buildRelease
#          echo "releaseName=$(ls app/build/apk/release/app-release.apk | awk -F '(/|.apk)' '{print $5}')" >> $GITHUB_OUTPUT
          
#      - name: Build debug
#        id: buildDebug
#        run: |
#          ./gradlew :app:buildDebug
#          echo "debugName=$(ls app/build/apk/debug/app-debug.apk | awk -F '(/|.apk)' '{print $5}')" >> $GITHUB_OUTPUT

#      - name: Upload debug
#        if: success()
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ steps.buildDebug.outputs.debugName }}
#          path: "app/build/apk/debug/app-debug.apk"

          
#      # Run Tests Build
#      - name: Run gradle tests
#        run: ./gradlew test

#      # Run Build Project
#      - name: Build gradle project
#        run: ./gradlew build

#      # Create APK Debug
#      - name: Build apk debug 
#        run: ./gradlew assembleDebug

      # Create APK Release
      - name: Build apk release
        run: ./gradlew assemble

#      - name: Get file apk path
#        id: debugApk
#        run: echo "apkfile=$(find app/build/outputs/apk/debug/*.apk)" >> $GITHUB_OUTPUT

      - name: Get file apk path
        id: releaseApk
        run: echo "apkfile=$(find app/build/outputs/apk/release/*.apk)" >> $GITHUB_OUTPUT

#      # Upload Artifact Build
#      - name: Upload APK Debug
#        uses: actions/upload-artifact@v3
#        with:
#           name: debug-artifacts
#           path: ${{ steps.debugApk.outputs.apkfile }}

      # Upload Artifact Build
      - name: Upload APK Release
        uses: actions/upload-artifact@v3
        with:
           name: release-artifacts
           path: ${{ steps.releaseApk.outputs.apkfile }}

#      - name: Upload APK Release
#        uses: actions/upload-artifact@v4
#        with:
#          name: app-release.apk
#          path: /app/build/outputs/apk/
#          include-hidden-files: true
          

